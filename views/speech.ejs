<%- include("parts/html-head") %>
<%- include("parts/navbars") %>


<div class="container">
    <div class="row justify-content-center align-items-center" style="height:180px">
        <div class="col-ls-6">
            <button type="button" class="btn btn-secondary btn-lg"><svg width="1em" height="1em" viewBox="0 0 16 16"
                    class="bi bi-caret-right-square-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm5.5 10a.5.5 0 0 0 .832.374l4.5-4a.5.5 0 0 0 0-.748l-4.5-4A.5.5 0 0 0 5.5 4v8z" />
                </svg> Recording
            </button>
        </div>

        <div class="col-ls-6 ml-3">
            <button type="button" id="stopbt" class="btn btn-secondary btn-lg"><svg width="1em" height="1em" viewBox="0 0 16 16"
                    class="bi bi-stop-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z" />
                </svg> Stop
            </button>
        </div>
    </div>

    <div class="row">

    </div>
    
    <div class="row justify-content-center">
        <iframe
            src="https://www.google.com/maps/embed?pb=!1m16!1m12!1m3!1d13444.709560305193!2d121.54374592910655!3d25.036555435567077!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!2m1!1z6Yar6Zmi!5e0!3m2!1szh-TW!2stw!4v1600927121004!5m2!1szh-TW!2stw"
            width="600" height="450" frameborder="0" style="border:0;" allowfullscreen="" aria-hidden="false"
            tabindex="0"></iframe>
    </div>
    
    <div class="row">

    </div>


</div>

<script>
  let shouldStop = false;
  let stopped = false;
  const downloadLink = document.getElementById('download');
  const stopButton = document.getElementById('stopbt');
  console.log('shouldStop: ', shouldStop, 'stopped: ', stopped)



  var handleSuccess = function (stream) {
      const options = {
          // mimeType: 'video/webm;codecs=vp9' 
          mimeType: 'audio/webm; codecs=Opus',
          // audioBitsPerSecond: 44100 * 16,
          };
      const recordedChunks = [];
      const mediaRecorder = new MediaRecorder(stream, options);

      // https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable
      // https://ithelp.ithome.com.tw/articles/10200758
      // https://ithelp.ithome.com.tw/articles/10200335
      // https://stackoverflow.com/questions/41739837/all-mime-types-supported-by-mediarecorder-in-firefox-and-chrome
      // https://www.crifan.com/js_mediarecorder_record_support_type/
      mediaRecorder.addEventListener('dataavailable', function (e) {
          console.log('ondataavailable')
          if (e.data.size > 0) {
              recordedChunks.push(e.data);
          }

          if (shouldStop === true && stopped === false) {
              // mediaRecorder.stop();
              stopped = true;
          }
      });

      mediaRecorder.addEventListener('stop', function () {
          downloadLink.href = URL.createObjectURL(new Blob(recordedChunks));
          downloadLink.download = 'acetest.mp3';
      });

      mediaRecorder.start();

      stopButton.addEventListener('click', function () {
          shouldStop = true;
          console.log('shouldStop: ', shouldStop, 'stopped: ', stopped)
          mediaRecorder.stop()
      })

  };

  navigator.mediaDevices.getUserMedia({ audio: true, video: false })
      .then(handleSuccess);

</script>
<script>
  navigator.permissions.query({ name: 'microphone' }).then(function (result) {
          if (result.state == 'granted') {
              console.log('granted')
          } else if (result.state == 'prompt') {
              console.log('prompt')
          } else if (result.state == 'denied') {
              console.log('denied')
          }
          result.onchange = function () {

          };
      });
  // navigator.permissions.query({ name: 'geolocation' }).then(function (result) {
  //         if (result.state === 'granted') {
  //             showMap();
  //         } else if (result.state === 'prompt') {
  //             showButtonToEnableMap();
  //         }
  //         // 如果被拒绝，请不要做任何操作。
  //     });
</script>





<%- include("parts/scripts") %>
<script>
    function formCheck() {
      const fd = new FormData(document.form1);  //FormData就是一個表單但沒有外觀
      fetch('/try-upload-wav', {
        method: 'POST',
        body: fd
      })
        .then(r => r.json()) //拿文字的話json改text
        .then(obj => {
          console.log(obj)
          myimg.src = "/img-uploads/" + obj.filename;
        })

      return false;
    }

    stopbt.addEventListener('click',formCheck)
    //food.addEventListener('change', formCheck)
</script>


<%- include("parts/html-foot") %>